#!/usr/bin/env python
import numpy as np
from argparse import ArgumentParser

'''
Script used to randomly generate a gazebo model for the RobotX 2018 "Avoid Obstacles" challenge
'''


def generate_obstacle_course(size, number, min_distance, ul=np.array([0, 0])):
    '''
    Randomly generate a set of random 2D points inside a box subject to the constraint
    that each is greater than a minimum distance apart.
    Note: the algorithm is naive and will block forever if it cannot be solved

    @param size: a 1x2 numpy array representing the size of the box as (X, Y) length
    @param number: the number of points to generate as an integer
    @param min_distance: the minimum euclidian distance two points must be apart to be included in the result
    @return: a number x 2 numpy array of the randomly generated points
    '''
    generated = []
    while len(generated) != number:
        new = np.random.rand(2) * size + ul
        for g in generated:
            if np.linalg.norm(new - g) < min_distance:
                continue
        generated.append(new)
    return np.array(generated)


'''
Python str.format Template for a buoy sub-model, parameterized with the buoys position,
the name to give it in gazebo, and the gazebo model name
'''
TEMPLATE = """
    <include>
      <name>{name}</name>
      <pose>{pos[0]} {pos[1]} {pos[2]} 0 0 0 </pose>
      <uri>model://{model}</uri>
    </include>
"""

# The header to start the model file before the buoy sub-models
HEADER = """<?xml version="1.0"?>
<!-- automaticly generated by a script -->
<sdf version="1.6">
  <model name="robotx_obstacle_course">"""

# The footer to end the model file after the buoy sub-models
FOOTER = """
  </model>
</sdf>"""


def get_models_xml(arr, model):
    '''
    Returns an SDF xml for a set of sub-models
    @param arr: a Nx2 array containing the 2D positions (X, Y) or the models
    @param model: a string for the name of the gazebo model
    @return: a string containing the sdf xml
    '''
    ret = ""
    for idx, pos in enumerate(arr):
        ret += TEMPLATE.format(pos=(pos[0], pos[1], 0.), model=model, name=model + "_" + str(idx))
    return ret

if __name__ == '__main__':
    # Create a command line argument parser
    parser = ArgumentParser(description="Generates an SDF model for the RobotX 2018 obstacle course challenge.")
    parser.add_argument('-s', '--seed', type=int, default=None,
                        help='Seed to use for random buoy placement. Can be used to produce the same model each time.')
    parser.add_argument('--a3', type=int, default=5,
                        help="Number of a3 buoys to include in challenge")
    parser.add_argument('--a5', type=int, default=5,
                        help="Number of a5 buoys to include in challenge")
    parser.add_argument('--a7', type=int, default=5,
                        help="Number of a7 buoys to include in challenge")
    args = parser.parse_args()

    if args.seed is not None:
        np.random.seed(args.seed)

    # Get total nubmer of buoys to generate
    total = args.a3 + args.a5 + args.a7

    # Randomly generate the
    arr = generate_obstacle_course(np.array([40, 40]), total, 10.0, ul=np.array([-20, -20]))

    # Get the model xml for the 3 buoy types using their randomly generated positions
    a3_xml = get_models_xml(arr[0: args.a3, :], "polyform_a3")
    a5_xml = get_models_xml(arr[args.a3: args.a3 + args.a5, :], "polyform_a5")
    a7_xml = get_models_xml(arr[args.a3 + args.a5: total, :], "polyform_a7")

    # Assemble full sdf
    print HEADER + a3_xml + a5_xml + a7_xml + FOOTER
